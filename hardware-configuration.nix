# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "ahci"
    "usb_storage"
    "usbhid"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/e0579136-40c4-45f7-9ebd-a378d20c5a31";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/3260-9D85";
    fsType = "vfat";
    options = [
      "fmask=0077"
      "dmask=0077"
    ];
  };

  # fileSystems."/media/volume1" = {
  #   device = "/dev/disk/by-uuid/17b324f9-4394-528a-3c0b-35c16ba0b946";
  #   fsType = "btrfs";
  # };

  fileSystems."/media/volume1" = {
    device = "/dev/disk/by-uuid/E86E431C6E42E344";
    fsType = "ntfs-3g";
    options = [
      "rw"
      # "uid=1000"
      "dmask=022"
      "fmask=133"
    ];
  };

  fileSystems."/media/volume2" = {
    device = "/dev/disk/by-uuid/8a164099-5172-a1f7-5f10-d814ac92a669";
    fsType = "btrfs";
  };

  fileSystems."/media/volume3" = {
    device = "/dev/disk/by-uuid/93976157-a9ac-6de0-429f-d5c4b57aec2f";
    fsType = "btrfs";
  };
  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp37s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
